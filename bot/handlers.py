import aiohttp
import os
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import json

router = Router()

API_URL = os.getenv('DJANGO_API_URL', 'http://backend:8000/api')

class AddTaskStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_due_date = State()
    waiting_for_categories = State()

class DeleteTaskStates(StatesGroup):
    waiting_for_task_number = State()

class CategoryStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_to_delete = State()

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def get_categories_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

async def make_api_request(endpoint, method='GET', data=None, headers=None):
    url = f"{API_URL}/{endpoint}"
    
    if headers is None:
        headers = {}
    
    headers.update({
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    })
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.request(method, url, json=data, headers=headers) as response:
                content_type = response.headers.get('Content-Type', '')
                
                if 'application/json' not in content_type:
                    text = await response.text()
                    return {'error': True, 'status_code': response.status, 'message': 'Non-JSON response'}
                
                text = await response.text()
                if response.status >= 400:
                    return {'error': True, 'status_code': response.status, 'message': text}
                
                try:
                    return json.loads(text)
                except json.JSONDecodeError:
                    return {'error': True, 'message': 'Invalid JSON response'}
                    
    except Exception as e:
        logging.exception("API request error: %s %s data=%s headers=%s", method, url, data, headers)
        return {'error': True, 'message': 'Connection failed'}

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ToDo –±–æ—Ç!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_tasks(message: Message):
    try:
        result = await make_api_request('tasks/')
        
        if isinstance(result, dict) and result.get('error'):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
            return
        
        tasks = result.get('results', []) if isinstance(result, dict) else result
        
        if not tasks:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return
            
        response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for i, task in enumerate(tasks, 1):
            if isinstance(task, dict) and 'title' in task:
                status = "‚úÖ" if task.get('completed') else "‚è≥"
                if task.get('is_overdue') and not task.get('completed'):
                    status = "üö®"  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                    
                categories = ", ".join([cat['name'] for cat in task.get('categories', []) if isinstance(cat, dict)])
                created_date = task.get('created_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                due_date = task.get('due_date')
                
                response += f"{i}. {status} {task['title']}\n"
                response += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_date[:10]}\n"
                if due_date:
                    due_status = "üö® –ü–†–û–°–†–û–ß–ï–ù–ê" if task.get('is_overdue') else "‚è∞ –î–µ–¥–ª–∞–π–Ω"
                    response += f"   {due_status}: {due_date[:10]}\n"
                if categories:
                    response += f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
                if task.get('description'):
                    desc = task['description']
                    if len(desc) > 50:
                        desc = desc[:50] + "..."
                    response += f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                response += f"   üÜî ID: {task['id'][:8]}...\n\n"
            
        response += "üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É¬ª"
        await message.answer(response)
        
    except Exception as e:
        logging.exception("Error in show_tasks handler")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

        
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: Message, state: FSMContext):
    await state.set_state(AddTaskStates.waiting_for_title)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(AddTaskStates.waiting_for_title)
async def process_task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddTaskStates.waiting_for_description)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")

@router.message(AddTaskStates.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    description = message.text if message.text != '-' else ''
    await state.update_data(description=description)
    await state.set_state(AddTaskStates.waiting_for_due_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.12.2024)\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )

@router.message(AddTaskStates.waiting_for_due_date)
async def process_task_due_date(message: Message, state: FSMContext):
    due_date_input = message.text.strip()
    
    if due_date_input != '-':
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_pattern = r'(\d{1,2})\.(\d{1,2})\.(\d{4})'
        match = re.match(date_pattern, due_date_input)
        
        if match:
            day, month, year = match.groups()
            try:
                due_date = datetime(int(year), int(month), int(day))
                await state.update_data(due_date=due_date.isoformat())
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                return
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
    else:
        await state.update_data(due_date=None)
    
    await state.set_state(AddTaskStates.waiting_for_categories)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_result = await make_api_request('categories/')
    existing_categories = []
    if not isinstance(categories_result, dict) or not categories_result.get('error'):
        categories = categories_result.get('results', []) if isinstance(categories_result, dict) else categories_result
        existing_categories = [cat['name'] for cat in categories if isinstance(cat, dict)]
    
    if existing_categories:
        categories_text = ", ".join(existing_categories)
        await message.answer(
            f"üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {categories_text})\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
        )
    else:
        await message.answer(
            "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
        )

@router.message(AddTaskStates.waiting_for_categories)
async def process_task_categories(message: Message, state: FSMContext):
    data = await state.get_data()
    categories_input = message.text.strip()
    
    task_data = {
        'title': data['title'],
        'description': data.get('description', ''),
        'completed': False,
        'due_date': data.get('due_date')
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if categories_input != '-':
        category_names = [cat.strip() for cat in categories_input.split(',') if cat.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        valid_categories = []
        invalid_categories = []
        
        for category_name in category_names:
            check_result = await make_api_request(f'categories/check_category?name={category_name}')
            if not isinstance(check_result, dict) or not check_result.get('error'):
                if check_result.get('exists'):
                    valid_categories.append(category_name)
                else:
                    invalid_categories.append(category_name)
        
        if invalid_categories:
            await message.answer(
                f"‚ùå –°–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {', '.join(invalid_categories)}\n"
                f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories) if valid_categories else '–Ω–µ—Ç'}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
        
        task_data['category_names'] = valid_categories
    
    try:
        result = await make_api_request('tasks/', 'POST', task_data)
        
        if isinstance(result, dict) and result.get('error'):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", reply_markup=get_main_keyboard())
        else:
            success_msg = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            if categories_input != '-' and category_names:
                success_msg += f"\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(category_names)}"
            if data.get('due_date'):
                success_msg += f"\nüìÖ –î–µ–¥–ª–∞–π–Ω: {data['due_date'][:10]}"
            
            await message.answer(success_msg, reply_markup=get_main_keyboard())
            
    except Exception as e:
        logging.exception("Error in process_task_categories handler")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", reply_markup=get_main_keyboard())
    
    await state.clear()

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task_start(message: Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    result = await make_api_request('tasks/')
    
    if isinstance(result, dict) and result.get('error'):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
        return
    
    tasks = result.get('results', []) if isinstance(result, dict) else result
    
    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(tasks=tasks)
    await state.set_state(DeleteTaskStates.waiting_for_task_number)
    
    response = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, task in enumerate(tasks, 1):
        if isinstance(task, dict) and 'title' in task:
            response += f"{i}. {task['title']}\n"
    
    await message.answer(response)

@router.message(DeleteTaskStates.waiting_for_task_number)
async def process_task_deletion(message: Message, state: FSMContext):
    try:
        task_number = int(message.text.strip())
        data = await state.get_data()
        tasks = data.get('tasks', [])
        
        if 1 <= task_number <= len(tasks):
            task_to_delete = tasks[task_number - 1]
            task_id = task_to_delete['id']
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            result = await make_api_request(f'tasks/{task_id}/delete_task/', 'POST')
            
            if isinstance(result, dict) and result.get('error'):
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", reply_markup=get_main_keyboard())
            else:
                await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{task_to_delete['title']}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—á–∏—Å–ª–æ):")
        return
    
    await state.clear()

@router.message(F.text == "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories_menu(message: Message):
    await message.answer(
        "üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
        reply_markup=get_categories_keyboard()
    )

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
async def show_categories(message: Message):
    try:
        result = await make_api_request('categories/')
        
        if isinstance(result, dict) and result.get('error'):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return
        
        categories = result.get('results', []) if isinstance(result, dict) else result
            
        if not categories:
            await message.answer("üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
            return
            
        response = "üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        for i, category in enumerate(categories, 1):
            if isinstance(category, dict) and 'name' in category:
                response += f"{i}. {category['name']}\n"
            
        await message.answer(response)
        
    except Exception as e:
        logging.exception("Error in show_categories handler")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: Message, state: FSMContext):
    await state.set_state(CategoryStates.waiting_for_category_name)
    await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(CategoryStates.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    category_name = message.text.strip()
    
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    check_result = await make_api_request(f'categories/check_category?name={category_name}')
    if not isinstance(check_result, dict) or not check_result.get('error'):
        if check_result.get('exists'):
            await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_categories_keyboard())
            await state.clear()
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_data = {'name': category_name}
    result = await make_api_request('categories/create_category/', 'POST', category_data)
    
    if isinstance(result, dict) and result.get('error'):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_categories_keyboard())
    else:
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_categories_keyboard())
    
    await state.clear()

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def delete_category_start(message: Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    result = await make_api_request('categories/')
    
    if isinstance(result, dict) and result.get('error'):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    
    categories = result.get('results', []) if isinstance(result, dict) else result
    
    if not categories:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(categories=categories)
    await state.set_state(CategoryStates.waiting_for_category_to_delete)
    
    response = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, category in enumerate(categories, 1):
        if isinstance(category, dict) and 'name' in category:
            response += f"{i}. {category['name']}\n"
    
    await message.answer(response)

@router.message(CategoryStates.waiting_for_category_to_delete)
async def process_category_deletion(message: Message, state: FSMContext):
    try:
        category_number = int(message.text.strip())
        data = await state.get_data()
        categories = data.get('categories', [])
        
        if 1 <= category_number <= len(categories):
            category_to_delete = categories[category_number - 1]
            category_id = category_to_delete['id']
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            result = await make_api_request(f'categories/{category_id}/delete_category/', 'POST')
            
            if isinstance(result, dict) and result.get('error'):
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_categories_keyboard())
            else:
                await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category_to_delete['name']}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_categories_keyboard())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–∏—Å–ª–æ):")
        return
    
    await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = """
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:**
üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é  
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)
‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∑–∞–¥–∞—á–∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
‚Ä¢ –ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª –∏–ª–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É¬ª.
    """
    await message.answer(help_text)